/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ConnectorKind the model 'ConnectorKind'
type ConnectorKind string

// List of ConnectorKind
const (
	CONNECTORKIND_CUSTOM ConnectorKind = "Custom"
	CONNECTORKIND_CUSTOMER_IO ConnectorKind = "CustomerIO"
	CONNECTORKIND_DISCORD ConnectorKind = "Discord"
	CONNECTORKIND_HUBSPOT ConnectorKind = "Hubspot"
	CONNECTORKIND_INNGEST ConnectorKind = "Inngest"
	CONNECTORKIND_SALESFORCE ConnectorKind = "Salesforce"
	CONNECTORKIND_SEGMENT ConnectorKind = "Segment"
	CONNECTORKIND_SLACK ConnectorKind = "Slack"
	CONNECTORKIND_TEAMS ConnectorKind = "Teams"
	CONNECTORKIND_TRIGGER_DEV ConnectorKind = "TriggerDev"
	CONNECTORKIND_WINDMILL ConnectorKind = "Windmill"
	CONNECTORKIND_ZAPIER ConnectorKind = "Zapier"
)

// All allowed values of ConnectorKind enum
var AllowedConnectorKindEnumValues = []ConnectorKind{
	"Custom",
	"CustomerIO",
	"Discord",
	"Hubspot",
	"Inngest",
	"Salesforce",
	"Segment",
	"Slack",
	"Teams",
	"TriggerDev",
	"Windmill",
	"Zapier",
}

func (v *ConnectorKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectorKind(value)
	for _, existing := range AllowedConnectorKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectorKind", value)
}

// NewConnectorKindFromValue returns a pointer to a valid ConnectorKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectorKindFromValue(v string) (*ConnectorKind, error) {
	ev := ConnectorKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectorKind: valid values are %v", v, AllowedConnectorKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectorKind) IsValid() bool {
	for _, existing := range AllowedConnectorKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectorKind value
func (v ConnectorKind) Ptr() *ConnectorKind {
	return &v
}

type NullableConnectorKind struct {
	value *ConnectorKind
	isSet bool
}

func (v NullableConnectorKind) Get() *ConnectorKind {
	return v.value
}

func (v *NullableConnectorKind) Set(val *ConnectorKind) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorKind) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorKind(val *ConnectorKind) *NullableConnectorKind {
	return &NullableConnectorKind{value: val, isSet: true}
}

func (v NullableConnectorKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

