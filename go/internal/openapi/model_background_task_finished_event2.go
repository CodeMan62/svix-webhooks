/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BackgroundTaskFinishedEvent2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackgroundTaskFinishedEvent2{}

// BackgroundTaskFinishedEvent2 struct for BackgroundTaskFinishedEvent2
type BackgroundTaskFinishedEvent2 struct {
	Data Data `json:"data"`
	Status BackgroundTaskStatus `json:"status"`
	Task BackgroundTaskType `json:"task"`
	TaskId string `json:"taskId"`
}

type _BackgroundTaskFinishedEvent2 BackgroundTaskFinishedEvent2

// NewBackgroundTaskFinishedEvent2 instantiates a new BackgroundTaskFinishedEvent2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackgroundTaskFinishedEvent2(data Data, status BackgroundTaskStatus, task BackgroundTaskType, taskId string) *BackgroundTaskFinishedEvent2 {
	this := BackgroundTaskFinishedEvent2{}
	this.Data = data
	this.Status = status
	this.Task = task
	this.TaskId = taskId
	return &this
}

// NewBackgroundTaskFinishedEvent2WithDefaults instantiates a new BackgroundTaskFinishedEvent2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackgroundTaskFinishedEvent2WithDefaults() *BackgroundTaskFinishedEvent2 {
	this := BackgroundTaskFinishedEvent2{}
	return &this
}

// GetData returns the Data field value
func (o *BackgroundTaskFinishedEvent2) GetData() Data {
	if o == nil {
		var ret Data
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskFinishedEvent2) GetDataOk() (*Data, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *BackgroundTaskFinishedEvent2) SetData(v Data) {
	o.Data = v
}

// GetStatus returns the Status field value
func (o *BackgroundTaskFinishedEvent2) GetStatus() BackgroundTaskStatus {
	if o == nil {
		var ret BackgroundTaskStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskFinishedEvent2) GetStatusOk() (*BackgroundTaskStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BackgroundTaskFinishedEvent2) SetStatus(v BackgroundTaskStatus) {
	o.Status = v
}

// GetTask returns the Task field value
func (o *BackgroundTaskFinishedEvent2) GetTask() BackgroundTaskType {
	if o == nil {
		var ret BackgroundTaskType
		return ret
	}

	return o.Task
}

// GetTaskOk returns a tuple with the Task field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskFinishedEvent2) GetTaskOk() (*BackgroundTaskType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Task, true
}

// SetTask sets field value
func (o *BackgroundTaskFinishedEvent2) SetTask(v BackgroundTaskType) {
	o.Task = v
}

// GetTaskId returns the TaskId field value
func (o *BackgroundTaskFinishedEvent2) GetTaskId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskFinishedEvent2) GetTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskId, true
}

// SetTaskId sets field value
func (o *BackgroundTaskFinishedEvent2) SetTaskId(v string) {
	o.TaskId = v
}

func (o BackgroundTaskFinishedEvent2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackgroundTaskFinishedEvent2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["status"] = o.Status
	toSerialize["task"] = o.Task
	toSerialize["taskId"] = o.TaskId
	return toSerialize, nil
}

func (o *BackgroundTaskFinishedEvent2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"status",
		"task",
		"taskId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBackgroundTaskFinishedEvent2 := _BackgroundTaskFinishedEvent2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBackgroundTaskFinishedEvent2)

	if err != nil {
		return err
	}

	*o = BackgroundTaskFinishedEvent2(varBackgroundTaskFinishedEvent2)

	return err
}

type NullableBackgroundTaskFinishedEvent2 struct {
	value *BackgroundTaskFinishedEvent2
	isSet bool
}

func (v NullableBackgroundTaskFinishedEvent2) Get() *BackgroundTaskFinishedEvent2 {
	return v.value
}

func (v *NullableBackgroundTaskFinishedEvent2) Set(val *BackgroundTaskFinishedEvent2) {
	v.value = val
	v.isSet = true
}

func (v NullableBackgroundTaskFinishedEvent2) IsSet() bool {
	return v.isSet
}

func (v *NullableBackgroundTaskFinishedEvent2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackgroundTaskFinishedEvent2(val *BackgroundTaskFinishedEvent2) *NullableBackgroundTaskFinishedEvent2 {
	return &NullableBackgroundTaskFinishedEvent2{value: val, isSet: true}
}

func (v NullableBackgroundTaskFinishedEvent2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackgroundTaskFinishedEvent2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


