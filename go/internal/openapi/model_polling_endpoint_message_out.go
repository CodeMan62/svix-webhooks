/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PollingEndpointMessageOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PollingEndpointMessageOut{}

// PollingEndpointMessageOut The MessageOut equivalent of polling endpoint
type PollingEndpointMessageOut struct {
	// List of free-form identifiers that endpoints can filter by
	Channels []string `json:"channels,omitempty"`
	// Optional unique identifier for the message
	EventId *string `json:"eventId,omitempty" validate:"regexp=^[a-zA-Z0-9\\\\-_.]+$"`
	// The event type's name
	EventType string `json:"eventType" validate:"regexp=^[a-zA-Z0-9\\\\-_.]+$"`
	Headers *map[string]string `json:"headers,omitempty"`
	// The msg's ID
	Id string `json:"id"`
	Payload map[string]interface{} `json:"payload"`
	Tags []string `json:"tags,omitempty"`
	Timestamp time.Time `json:"timestamp"`
}

type _PollingEndpointMessageOut PollingEndpointMessageOut

// NewPollingEndpointMessageOut instantiates a new PollingEndpointMessageOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPollingEndpointMessageOut(eventType string, id string, payload map[string]interface{}, timestamp time.Time) *PollingEndpointMessageOut {
	this := PollingEndpointMessageOut{}
	this.EventType = eventType
	this.Id = id
	this.Payload = payload
	this.Timestamp = timestamp
	return &this
}

// NewPollingEndpointMessageOutWithDefaults instantiates a new PollingEndpointMessageOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPollingEndpointMessageOutWithDefaults() *PollingEndpointMessageOut {
	this := PollingEndpointMessageOut{}
	return &this
}

// GetChannels returns the Channels field value if set, zero value otherwise.
func (o *PollingEndpointMessageOut) GetChannels() []string {
	if o == nil || IsNil(o.Channels) {
		var ret []string
		return ret
	}
	return o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PollingEndpointMessageOut) GetChannelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Channels) {
		return nil, false
	}
	return o.Channels, true
}

// HasChannels returns a boolean if a field has been set.
func (o *PollingEndpointMessageOut) HasChannels() bool {
	if o != nil && !IsNil(o.Channels) {
		return true
	}

	return false
}

// SetChannels gets a reference to the given []string and assigns it to the Channels field.
func (o *PollingEndpointMessageOut) SetChannels(v []string) {
	o.Channels = v
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *PollingEndpointMessageOut) GetEventId() string {
	if o == nil || IsNil(o.EventId) {
		var ret string
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PollingEndpointMessageOut) GetEventIdOk() (*string, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *PollingEndpointMessageOut) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given string and assigns it to the EventId field.
func (o *PollingEndpointMessageOut) SetEventId(v string) {
	o.EventId = &v
}

// GetEventType returns the EventType field value
func (o *PollingEndpointMessageOut) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *PollingEndpointMessageOut) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *PollingEndpointMessageOut) SetEventType(v string) {
	o.EventType = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *PollingEndpointMessageOut) GetHeaders() map[string]string {
	if o == nil || IsNil(o.Headers) {
		var ret map[string]string
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PollingEndpointMessageOut) GetHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *PollingEndpointMessageOut) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *PollingEndpointMessageOut) SetHeaders(v map[string]string) {
	o.Headers = &v
}

// GetId returns the Id field value
func (o *PollingEndpointMessageOut) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PollingEndpointMessageOut) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PollingEndpointMessageOut) SetId(v string) {
	o.Id = v
}

// GetPayload returns the Payload field value
func (o *PollingEndpointMessageOut) GetPayload() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *PollingEndpointMessageOut) GetPayloadOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Payload, true
}

// SetPayload sets field value
func (o *PollingEndpointMessageOut) SetPayload(v map[string]interface{}) {
	o.Payload = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *PollingEndpointMessageOut) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PollingEndpointMessageOut) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PollingEndpointMessageOut) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *PollingEndpointMessageOut) SetTags(v []string) {
	o.Tags = v
}

// GetTimestamp returns the Timestamp field value
func (o *PollingEndpointMessageOut) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *PollingEndpointMessageOut) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *PollingEndpointMessageOut) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

func (o PollingEndpointMessageOut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PollingEndpointMessageOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Channels) {
		toSerialize["channels"] = o.Channels
	}
	if !IsNil(o.EventId) {
		toSerialize["eventId"] = o.EventId
	}
	toSerialize["eventType"] = o.EventType
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	toSerialize["id"] = o.Id
	toSerialize["payload"] = o.Payload
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *PollingEndpointMessageOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eventType",
		"id",
		"payload",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPollingEndpointMessageOut := _PollingEndpointMessageOut{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPollingEndpointMessageOut)

	if err != nil {
		return err
	}

	*o = PollingEndpointMessageOut(varPollingEndpointMessageOut)

	return err
}

type NullablePollingEndpointMessageOut struct {
	value *PollingEndpointMessageOut
	isSet bool
}

func (v NullablePollingEndpointMessageOut) Get() *PollingEndpointMessageOut {
	return v.value
}

func (v *NullablePollingEndpointMessageOut) Set(val *PollingEndpointMessageOut) {
	v.value = val
	v.isSet = true
}

func (v NullablePollingEndpointMessageOut) IsSet() bool {
	return v.isSet
}

func (v *NullablePollingEndpointMessageOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePollingEndpointMessageOut(val *PollingEndpointMessageOut) *NullablePollingEndpointMessageOut {
	return &NullablePollingEndpointMessageOut{value: val, isSet: true}
}

func (v NullablePollingEndpointMessageOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePollingEndpointMessageOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


