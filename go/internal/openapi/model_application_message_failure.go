/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApplicationMessageFailure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationMessageFailure{}

// ApplicationMessageFailure struct for ApplicationMessageFailure
type ApplicationMessageFailure struct {
	// The app's ID
	AppId string `json:"appId"`
	Reason string `json:"reason"`
}

type _ApplicationMessageFailure ApplicationMessageFailure

// NewApplicationMessageFailure instantiates a new ApplicationMessageFailure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationMessageFailure(appId string, reason string) *ApplicationMessageFailure {
	this := ApplicationMessageFailure{}
	this.AppId = appId
	this.Reason = reason
	return &this
}

// NewApplicationMessageFailureWithDefaults instantiates a new ApplicationMessageFailure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationMessageFailureWithDefaults() *ApplicationMessageFailure {
	this := ApplicationMessageFailure{}
	return &this
}

// GetAppId returns the AppId field value
func (o *ApplicationMessageFailure) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *ApplicationMessageFailure) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *ApplicationMessageFailure) SetAppId(v string) {
	o.AppId = v
}

// GetReason returns the Reason field value
func (o *ApplicationMessageFailure) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *ApplicationMessageFailure) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *ApplicationMessageFailure) SetReason(v string) {
	o.Reason = v
}

func (o ApplicationMessageFailure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationMessageFailure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appId"] = o.AppId
	toSerialize["reason"] = o.Reason
	return toSerialize, nil
}

func (o *ApplicationMessageFailure) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"appId",
		"reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApplicationMessageFailure := _ApplicationMessageFailure{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApplicationMessageFailure)

	if err != nil {
		return err
	}

	*o = ApplicationMessageFailure(varApplicationMessageFailure)

	return err
}

type NullableApplicationMessageFailure struct {
	value *ApplicationMessageFailure
	isSet bool
}

func (v NullableApplicationMessageFailure) Get() *ApplicationMessageFailure {
	return v.value
}

func (v *NullableApplicationMessageFailure) Set(val *ApplicationMessageFailure) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationMessageFailure) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationMessageFailure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationMessageFailure(val *ApplicationMessageFailure) *NullableApplicationMessageFailure {
	return &NullableApplicationMessageFailure{value: val, isSet: true}
}

func (v NullableApplicationMessageFailure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationMessageFailure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


