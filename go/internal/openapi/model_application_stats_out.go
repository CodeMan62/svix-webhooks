/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApplicationStatsOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationStatsOut{}

// ApplicationStatsOut A copy of  [`backgroundtask::ApplicationStats`], but serialized with camelCase fields for customers.
type ApplicationStatsOut struct {
	// The app's ID
	AppId string `json:"appId"`
	// The app's UID
	AppUid *string `json:"appUid,omitempty" validate:"regexp=^[a-zA-Z0-9\\\\-_.]+$"`
	MessageDestinations int64 `json:"messageDestinations"`
}

type _ApplicationStatsOut ApplicationStatsOut

// NewApplicationStatsOut instantiates a new ApplicationStatsOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationStatsOut(appId string, messageDestinations int64) *ApplicationStatsOut {
	this := ApplicationStatsOut{}
	this.AppId = appId
	this.MessageDestinations = messageDestinations
	return &this
}

// NewApplicationStatsOutWithDefaults instantiates a new ApplicationStatsOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationStatsOutWithDefaults() *ApplicationStatsOut {
	this := ApplicationStatsOut{}
	return &this
}

// GetAppId returns the AppId field value
func (o *ApplicationStatsOut) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *ApplicationStatsOut) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *ApplicationStatsOut) SetAppId(v string) {
	o.AppId = v
}

// GetAppUid returns the AppUid field value if set, zero value otherwise.
func (o *ApplicationStatsOut) GetAppUid() string {
	if o == nil || IsNil(o.AppUid) {
		var ret string
		return ret
	}
	return *o.AppUid
}

// GetAppUidOk returns a tuple with the AppUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationStatsOut) GetAppUidOk() (*string, bool) {
	if o == nil || IsNil(o.AppUid) {
		return nil, false
	}
	return o.AppUid, true
}

// HasAppUid returns a boolean if a field has been set.
func (o *ApplicationStatsOut) HasAppUid() bool {
	if o != nil && !IsNil(o.AppUid) {
		return true
	}

	return false
}

// SetAppUid gets a reference to the given string and assigns it to the AppUid field.
func (o *ApplicationStatsOut) SetAppUid(v string) {
	o.AppUid = &v
}

// GetMessageDestinations returns the MessageDestinations field value
func (o *ApplicationStatsOut) GetMessageDestinations() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MessageDestinations
}

// GetMessageDestinationsOk returns a tuple with the MessageDestinations field value
// and a boolean to check if the value has been set.
func (o *ApplicationStatsOut) GetMessageDestinationsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageDestinations, true
}

// SetMessageDestinations sets field value
func (o *ApplicationStatsOut) SetMessageDestinations(v int64) {
	o.MessageDestinations = v
}

func (o ApplicationStatsOut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationStatsOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appId"] = o.AppId
	if !IsNil(o.AppUid) {
		toSerialize["appUid"] = o.AppUid
	}
	toSerialize["messageDestinations"] = o.MessageDestinations
	return toSerialize, nil
}

func (o *ApplicationStatsOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"appId",
		"messageDestinations",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApplicationStatsOut := _ApplicationStatsOut{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApplicationStatsOut)

	if err != nil {
		return err
	}

	*o = ApplicationStatsOut(varApplicationStatsOut)

	return err
}

type NullableApplicationStatsOut struct {
	value *ApplicationStatsOut
	isSet bool
}

func (v NullableApplicationStatsOut) Get() *ApplicationStatsOut {
	return v.value
}

func (v *NullableApplicationStatsOut) Set(val *ApplicationStatsOut) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationStatsOut) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationStatsOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationStatsOut(val *ApplicationStatsOut) *NullableApplicationStatsOut {
	return &NullableApplicationStatsOut{value: val, isSet: true}
}

func (v NullableApplicationStatsOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationStatsOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


