/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EndpointEnabledEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EndpointEnabledEvent{}

// EndpointEnabledEvent Sent when an endpoint has been enabled.
type EndpointEnabledEvent struct {
	Data EndpointEnabledEventData `json:"data"`
	Type string                   `json:"type"`
}

type _EndpointEnabledEvent EndpointEnabledEvent

// NewEndpointEnabledEvent instantiates a new EndpointEnabledEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointEnabledEvent(data EndpointEnabledEventData, type_ string) *EndpointEnabledEvent {
	this := EndpointEnabledEvent{}
	this.Data = data
	this.Type = type_
	return &this
}

// NewEndpointEnabledEventWithDefaults instantiates a new EndpointEnabledEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointEnabledEventWithDefaults() *EndpointEnabledEvent {
	this := EndpointEnabledEvent{}
	var type_ string = "endpoint.enabled"
	this.Type = type_
	return &this
}

// GetData returns the Data field value
func (o *EndpointEnabledEvent) GetData() EndpointEnabledEventData {
	if o == nil {
		var ret EndpointEnabledEventData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *EndpointEnabledEvent) GetDataOk() (*EndpointEnabledEventData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *EndpointEnabledEvent) SetData(v EndpointEnabledEventData) {
	o.Data = v
}

// GetType returns the Type field value
func (o *EndpointEnabledEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EndpointEnabledEvent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EndpointEnabledEvent) SetType(v string) {
	o.Type = v
}

func (o EndpointEnabledEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointEnabledEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *EndpointEnabledEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEndpointEnabledEvent := _EndpointEnabledEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEndpointEnabledEvent)

	if err != nil {
		return err
	}

	*o = EndpointEnabledEvent(varEndpointEnabledEvent)

	return err
}

type NullableEndpointEnabledEvent struct {
	value *EndpointEnabledEvent
	isSet bool
}

func (v NullableEndpointEnabledEvent) Get() *EndpointEnabledEvent {
	return v.value
}

func (v *NullableEndpointEnabledEvent) Set(val *EndpointEnabledEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointEnabledEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointEnabledEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointEnabledEvent(val *EndpointEnabledEvent) *NullableEndpointEnabledEvent {
	return &NullableEndpointEnabledEvent{value: val, isSet: true}
}

func (v NullableEndpointEnabledEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointEnabledEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
