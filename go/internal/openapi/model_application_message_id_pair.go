/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ApplicationMessageIdPair type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationMessageIdPair{}

// ApplicationMessageIdPair struct for ApplicationMessageIdPair
type ApplicationMessageIdPair struct {
	// The app's ID
	AppId string `json:"appId"`
	// The msg's ID
	MsgId string `json:"msgId"`
}

type _ApplicationMessageIdPair ApplicationMessageIdPair

// NewApplicationMessageIdPair instantiates a new ApplicationMessageIdPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationMessageIdPair(appId string, msgId string) *ApplicationMessageIdPair {
	this := ApplicationMessageIdPair{}
	this.AppId = appId
	this.MsgId = msgId
	return &this
}

// NewApplicationMessageIdPairWithDefaults instantiates a new ApplicationMessageIdPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationMessageIdPairWithDefaults() *ApplicationMessageIdPair {
	this := ApplicationMessageIdPair{}
	return &this
}

// GetAppId returns the AppId field value
func (o *ApplicationMessageIdPair) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *ApplicationMessageIdPair) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *ApplicationMessageIdPair) SetAppId(v string) {
	o.AppId = v
}

// GetMsgId returns the MsgId field value
func (o *ApplicationMessageIdPair) GetMsgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MsgId
}

// GetMsgIdOk returns a tuple with the MsgId field value
// and a boolean to check if the value has been set.
func (o *ApplicationMessageIdPair) GetMsgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MsgId, true
}

// SetMsgId sets field value
func (o *ApplicationMessageIdPair) SetMsgId(v string) {
	o.MsgId = v
}

func (o ApplicationMessageIdPair) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationMessageIdPair) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appId"] = o.AppId
	toSerialize["msgId"] = o.MsgId
	return toSerialize, nil
}

func (o *ApplicationMessageIdPair) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"appId",
		"msgId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApplicationMessageIdPair := _ApplicationMessageIdPair{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApplicationMessageIdPair)

	if err != nil {
		return err
	}

	*o = ApplicationMessageIdPair(varApplicationMessageIdPair)

	return err
}

type NullableApplicationMessageIdPair struct {
	value *ApplicationMessageIdPair
	isSet bool
}

func (v NullableApplicationMessageIdPair) Get() *ApplicationMessageIdPair {
	return v.value
}

func (v *NullableApplicationMessageIdPair) Set(val *ApplicationMessageIdPair) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationMessageIdPair) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationMessageIdPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationMessageIdPair(val *ApplicationMessageIdPair) *NullableApplicationMessageIdPair {
	return &NullableApplicationMessageIdPair{value: val, isSet: true}
}

func (v NullableApplicationMessageIdPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationMessageIdPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
