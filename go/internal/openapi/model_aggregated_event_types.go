/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AggregatedEventTypes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AggregatedEventTypes{}

// AggregatedEventTypes struct for AggregatedEventTypes
type AggregatedEventTypes struct {
	// The app's ID
	AppId string `json:"appId"`
	ExplicitlySubscribedEventTypes []string `json:"explicitlySubscribedEventTypes"`
	HasCatchAllEndpoint bool `json:"hasCatchAllEndpoint"`
}

type _AggregatedEventTypes AggregatedEventTypes

// NewAggregatedEventTypes instantiates a new AggregatedEventTypes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregatedEventTypes(appId string, explicitlySubscribedEventTypes []string, hasCatchAllEndpoint bool) *AggregatedEventTypes {
	this := AggregatedEventTypes{}
	this.AppId = appId
	this.ExplicitlySubscribedEventTypes = explicitlySubscribedEventTypes
	this.HasCatchAllEndpoint = hasCatchAllEndpoint
	return &this
}

// NewAggregatedEventTypesWithDefaults instantiates a new AggregatedEventTypes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregatedEventTypesWithDefaults() *AggregatedEventTypes {
	this := AggregatedEventTypes{}
	return &this
}

// GetAppId returns the AppId field value
func (o *AggregatedEventTypes) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *AggregatedEventTypes) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *AggregatedEventTypes) SetAppId(v string) {
	o.AppId = v
}

// GetExplicitlySubscribedEventTypes returns the ExplicitlySubscribedEventTypes field value
func (o *AggregatedEventTypes) GetExplicitlySubscribedEventTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ExplicitlySubscribedEventTypes
}

// GetExplicitlySubscribedEventTypesOk returns a tuple with the ExplicitlySubscribedEventTypes field value
// and a boolean to check if the value has been set.
func (o *AggregatedEventTypes) GetExplicitlySubscribedEventTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExplicitlySubscribedEventTypes, true
}

// SetExplicitlySubscribedEventTypes sets field value
func (o *AggregatedEventTypes) SetExplicitlySubscribedEventTypes(v []string) {
	o.ExplicitlySubscribedEventTypes = v
}

// GetHasCatchAllEndpoint returns the HasCatchAllEndpoint field value
func (o *AggregatedEventTypes) GetHasCatchAllEndpoint() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasCatchAllEndpoint
}

// GetHasCatchAllEndpointOk returns a tuple with the HasCatchAllEndpoint field value
// and a boolean to check if the value has been set.
func (o *AggregatedEventTypes) GetHasCatchAllEndpointOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasCatchAllEndpoint, true
}

// SetHasCatchAllEndpoint sets field value
func (o *AggregatedEventTypes) SetHasCatchAllEndpoint(v bool) {
	o.HasCatchAllEndpoint = v
}

func (o AggregatedEventTypes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AggregatedEventTypes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appId"] = o.AppId
	toSerialize["explicitlySubscribedEventTypes"] = o.ExplicitlySubscribedEventTypes
	toSerialize["hasCatchAllEndpoint"] = o.HasCatchAllEndpoint
	return toSerialize, nil
}

func (o *AggregatedEventTypes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"appId",
		"explicitlySubscribedEventTypes",
		"hasCatchAllEndpoint",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAggregatedEventTypes := _AggregatedEventTypes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAggregatedEventTypes)

	if err != nil {
		return err
	}

	*o = AggregatedEventTypes(varAggregatedEventTypes)

	return err
}

type NullableAggregatedEventTypes struct {
	value *AggregatedEventTypes
	isSet bool
}

func (v NullableAggregatedEventTypes) Get() *AggregatedEventTypes {
	return v.value
}

func (v *NullableAggregatedEventTypes) Set(val *AggregatedEventTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregatedEventTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregatedEventTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregatedEventTypes(val *AggregatedEventTypes) *NullableAggregatedEventTypes {
	return &NullableAggregatedEventTypes{value: val, isSet: true}
}

func (v NullableAggregatedEventTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregatedEventTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


