/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PollingEndpointOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PollingEndpointOut{}

// PollingEndpointOut struct for PollingEndpointOut
type PollingEndpointOut struct {
	Data     []PollingEndpointMessageOut `json:"data"`
	Done     bool                        `json:"done"`
	Iterator string                      `json:"iterator"`
}

type _PollingEndpointOut PollingEndpointOut

// NewPollingEndpointOut instantiates a new PollingEndpointOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPollingEndpointOut(data []PollingEndpointMessageOut, done bool, iterator string) *PollingEndpointOut {
	this := PollingEndpointOut{}
	this.Data = data
	this.Done = done
	this.Iterator = iterator
	return &this
}

// NewPollingEndpointOutWithDefaults instantiates a new PollingEndpointOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPollingEndpointOutWithDefaults() *PollingEndpointOut {
	this := PollingEndpointOut{}
	return &this
}

// GetData returns the Data field value
func (o *PollingEndpointOut) GetData() []PollingEndpointMessageOut {
	if o == nil {
		var ret []PollingEndpointMessageOut
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *PollingEndpointOut) GetDataOk() ([]PollingEndpointMessageOut, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *PollingEndpointOut) SetData(v []PollingEndpointMessageOut) {
	o.Data = v
}

// GetDone returns the Done field value
func (o *PollingEndpointOut) GetDone() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Done
}

// GetDoneOk returns a tuple with the Done field value
// and a boolean to check if the value has been set.
func (o *PollingEndpointOut) GetDoneOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Done, true
}

// SetDone sets field value
func (o *PollingEndpointOut) SetDone(v bool) {
	o.Done = v
}

// GetIterator returns the Iterator field value
func (o *PollingEndpointOut) GetIterator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Iterator
}

// GetIteratorOk returns a tuple with the Iterator field value
// and a boolean to check if the value has been set.
func (o *PollingEndpointOut) GetIteratorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Iterator, true
}

// SetIterator sets field value
func (o *PollingEndpointOut) SetIterator(v string) {
	o.Iterator = v
}

func (o PollingEndpointOut) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PollingEndpointOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["done"] = o.Done
	toSerialize["iterator"] = o.Iterator
	return toSerialize, nil
}

func (o *PollingEndpointOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"done",
		"iterator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPollingEndpointOut := _PollingEndpointOut{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPollingEndpointOut)

	if err != nil {
		return err
	}

	*o = PollingEndpointOut(varPollingEndpointOut)

	return err
}

type NullablePollingEndpointOut struct {
	value *PollingEndpointOut
	isSet bool
}

func (v NullablePollingEndpointOut) Get() *PollingEndpointOut {
	return v.value
}

func (v *NullablePollingEndpointOut) Set(val *PollingEndpointOut) {
	v.value = val
	v.isSet = true
}

func (v NullablePollingEndpointOut) IsSet() bool {
	return v.isSet
}

func (v *NullablePollingEndpointOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePollingEndpointOut(val *PollingEndpointOut) *NullablePollingEndpointOut {
	return &NullablePollingEndpointOut{value: val, isSet: true}
}

func (v NullablePollingEndpointOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePollingEndpointOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
