/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvironmentIn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentIn{}

// EnvironmentIn struct for EnvironmentIn
type EnvironmentIn struct {
	EventTypes []EventTypeIn `json:"eventTypes,omitempty"`
	Settings map[string]interface{} `json:"settings,omitempty"`
	TransformationTemplates []TemplateIn `json:"transformationTemplates,omitempty"`
}

// NewEnvironmentIn instantiates a new EnvironmentIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentIn() *EnvironmentIn {
	this := EnvironmentIn{}
	return &this
}

// NewEnvironmentInWithDefaults instantiates a new EnvironmentIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentInWithDefaults() *EnvironmentIn {
	this := EnvironmentIn{}
	return &this
}

// GetEventTypes returns the EventTypes field value if set, zero value otherwise.
func (o *EnvironmentIn) GetEventTypes() []EventTypeIn {
	if o == nil || IsNil(o.EventTypes) {
		var ret []EventTypeIn
		return ret
	}
	return o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentIn) GetEventTypesOk() ([]EventTypeIn, bool) {
	if o == nil || IsNil(o.EventTypes) {
		return nil, false
	}
	return o.EventTypes, true
}

// HasEventTypes returns a boolean if a field has been set.
func (o *EnvironmentIn) HasEventTypes() bool {
	if o != nil && !IsNil(o.EventTypes) {
		return true
	}

	return false
}

// SetEventTypes gets a reference to the given []EventTypeIn and assigns it to the EventTypes field.
func (o *EnvironmentIn) SetEventTypes(v []EventTypeIn) {
	o.EventTypes = v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *EnvironmentIn) GetSettings() map[string]interface{} {
	if o == nil || IsNil(o.Settings) {
		var ret map[string]interface{}
		return ret
	}
	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentIn) GetSettingsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Settings) {
		return map[string]interface{}{}, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *EnvironmentIn) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given map[string]interface{} and assigns it to the Settings field.
func (o *EnvironmentIn) SetSettings(v map[string]interface{}) {
	o.Settings = v
}

// GetTransformationTemplates returns the TransformationTemplates field value if set, zero value otherwise.
func (o *EnvironmentIn) GetTransformationTemplates() []TemplateIn {
	if o == nil || IsNil(o.TransformationTemplates) {
		var ret []TemplateIn
		return ret
	}
	return o.TransformationTemplates
}

// GetTransformationTemplatesOk returns a tuple with the TransformationTemplates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentIn) GetTransformationTemplatesOk() ([]TemplateIn, bool) {
	if o == nil || IsNil(o.TransformationTemplates) {
		return nil, false
	}
	return o.TransformationTemplates, true
}

// HasTransformationTemplates returns a boolean if a field has been set.
func (o *EnvironmentIn) HasTransformationTemplates() bool {
	if o != nil && !IsNil(o.TransformationTemplates) {
		return true
	}

	return false
}

// SetTransformationTemplates gets a reference to the given []TemplateIn and assigns it to the TransformationTemplates field.
func (o *EnvironmentIn) SetTransformationTemplates(v []TemplateIn) {
	o.TransformationTemplates = v
}

func (o EnvironmentIn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentIn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventTypes) {
		toSerialize["eventTypes"] = o.EventTypes
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.TransformationTemplates) {
		toSerialize["transformationTemplates"] = o.TransformationTemplates
	}
	return toSerialize, nil
}

type NullableEnvironmentIn struct {
	value *EnvironmentIn
	isSet bool
}

func (v NullableEnvironmentIn) Get() *EnvironmentIn {
	return v.value
}

func (v *NullableEnvironmentIn) Set(val *EnvironmentIn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentIn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentIn(val *EnvironmentIn) *NullableEnvironmentIn {
	return &NullableEnvironmentIn{value: val, isSet: true}
}

func (v NullableEnvironmentIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


