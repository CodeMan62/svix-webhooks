/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DataAnyOf3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataAnyOf3{}

// DataAnyOf3 struct for DataAnyOf3
type DataAnyOf3 struct {
	EventTypes []AggregatedEventTypes `json:"event_types"`
}

type _DataAnyOf3 DataAnyOf3

// NewDataAnyOf3 instantiates a new DataAnyOf3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataAnyOf3(eventTypes []AggregatedEventTypes) *DataAnyOf3 {
	this := DataAnyOf3{}
	this.EventTypes = eventTypes
	return &this
}

// NewDataAnyOf3WithDefaults instantiates a new DataAnyOf3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataAnyOf3WithDefaults() *DataAnyOf3 {
	this := DataAnyOf3{}
	return &this
}

// GetEventTypes returns the EventTypes field value
func (o *DataAnyOf3) GetEventTypes() []AggregatedEventTypes {
	if o == nil {
		var ret []AggregatedEventTypes
		return ret
	}

	return o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value
// and a boolean to check if the value has been set.
func (o *DataAnyOf3) GetEventTypesOk() ([]AggregatedEventTypes, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTypes, true
}

// SetEventTypes sets field value
func (o *DataAnyOf3) SetEventTypes(v []AggregatedEventTypes) {
	o.EventTypes = v
}

func (o DataAnyOf3) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataAnyOf3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_types"] = o.EventTypes
	return toSerialize, nil
}

func (o *DataAnyOf3) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_types",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataAnyOf3 := _DataAnyOf3{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataAnyOf3)

	if err != nil {
		return err
	}

	*o = DataAnyOf3(varDataAnyOf3)

	return err
}

type NullableDataAnyOf3 struct {
	value *DataAnyOf3
	isSet bool
}

func (v NullableDataAnyOf3) Get() *DataAnyOf3 {
	return v.value
}

func (v *NullableDataAnyOf3) Set(val *DataAnyOf3) {
	v.value = val
	v.isSet = true
}

func (v NullableDataAnyOf3) IsSet() bool {
	return v.isSet
}

func (v *NullableDataAnyOf3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataAnyOf3(val *DataAnyOf3) *NullableDataAnyOf3 {
	return &NullableDataAnyOf3{value: val, isSet: true}
}

func (v NullableDataAnyOf3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataAnyOf3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
