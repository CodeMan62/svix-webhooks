/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataAnyOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataAnyOf2{}

// DataAnyOf2 struct for DataAnyOf2
type DataAnyOf2 struct {
	MessagesCreated []ApplicationMessageIdPair `json:"messages_created"`
	MessagesFailed []ApplicationMessageFailure `json:"messages_failed"`
}

type _DataAnyOf2 DataAnyOf2

// NewDataAnyOf2 instantiates a new DataAnyOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataAnyOf2(messagesCreated []ApplicationMessageIdPair, messagesFailed []ApplicationMessageFailure) *DataAnyOf2 {
	this := DataAnyOf2{}
	this.MessagesCreated = messagesCreated
	this.MessagesFailed = messagesFailed
	return &this
}

// NewDataAnyOf2WithDefaults instantiates a new DataAnyOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataAnyOf2WithDefaults() *DataAnyOf2 {
	this := DataAnyOf2{}
	return &this
}

// GetMessagesCreated returns the MessagesCreated field value
func (o *DataAnyOf2) GetMessagesCreated() []ApplicationMessageIdPair {
	if o == nil {
		var ret []ApplicationMessageIdPair
		return ret
	}

	return o.MessagesCreated
}

// GetMessagesCreatedOk returns a tuple with the MessagesCreated field value
// and a boolean to check if the value has been set.
func (o *DataAnyOf2) GetMessagesCreatedOk() ([]ApplicationMessageIdPair, bool) {
	if o == nil {
		return nil, false
	}
	return o.MessagesCreated, true
}

// SetMessagesCreated sets field value
func (o *DataAnyOf2) SetMessagesCreated(v []ApplicationMessageIdPair) {
	o.MessagesCreated = v
}

// GetMessagesFailed returns the MessagesFailed field value
func (o *DataAnyOf2) GetMessagesFailed() []ApplicationMessageFailure {
	if o == nil {
		var ret []ApplicationMessageFailure
		return ret
	}

	return o.MessagesFailed
}

// GetMessagesFailedOk returns a tuple with the MessagesFailed field value
// and a boolean to check if the value has been set.
func (o *DataAnyOf2) GetMessagesFailedOk() ([]ApplicationMessageFailure, bool) {
	if o == nil {
		return nil, false
	}
	return o.MessagesFailed, true
}

// SetMessagesFailed sets field value
func (o *DataAnyOf2) SetMessagesFailed(v []ApplicationMessageFailure) {
	o.MessagesFailed = v
}

func (o DataAnyOf2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataAnyOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["messages_created"] = o.MessagesCreated
	toSerialize["messages_failed"] = o.MessagesFailed
	return toSerialize, nil
}

func (o *DataAnyOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"messages_created",
		"messages_failed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataAnyOf2 := _DataAnyOf2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataAnyOf2)

	if err != nil {
		return err
	}

	*o = DataAnyOf2(varDataAnyOf2)

	return err
}

type NullableDataAnyOf2 struct {
	value *DataAnyOf2
	isSet bool
}

func (v NullableDataAnyOf2) Get() *DataAnyOf2 {
	return v.value
}

func (v *NullableDataAnyOf2) Set(val *DataAnyOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableDataAnyOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableDataAnyOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataAnyOf2(val *DataAnyOf2) *NullableDataAnyOf2 {
	return &NullableDataAnyOf2{value: val, isSet: true}
}

func (v NullableDataAnyOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataAnyOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


