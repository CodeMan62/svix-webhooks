/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Data A copy of [`backgroundtask::Data`], but serialized with camelCase fields for customers.
type Data struct {
	DataAnyOf  *DataAnyOf
	DataAnyOf1 *DataAnyOf1
	DataAnyOf2 *DataAnyOf2
	DataAnyOf3 *DataAnyOf3
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Data) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into DataAnyOf
	err = json.Unmarshal(data, &dst.DataAnyOf)
	if err == nil {
		jsonDataAnyOf, _ := json.Marshal(dst.DataAnyOf)
		if string(jsonDataAnyOf) == "{}" { // empty struct
			dst.DataAnyOf = nil
		} else {
			return nil // data stored in dst.DataAnyOf, return on the first match
		}
	} else {
		dst.DataAnyOf = nil
	}

	// try to unmarshal JSON data into DataAnyOf1
	err = json.Unmarshal(data, &dst.DataAnyOf1)
	if err == nil {
		jsonDataAnyOf1, _ := json.Marshal(dst.DataAnyOf1)
		if string(jsonDataAnyOf1) == "{}" { // empty struct
			dst.DataAnyOf1 = nil
		} else {
			return nil // data stored in dst.DataAnyOf1, return on the first match
		}
	} else {
		dst.DataAnyOf1 = nil
	}

	// try to unmarshal JSON data into DataAnyOf2
	err = json.Unmarshal(data, &dst.DataAnyOf2)
	if err == nil {
		jsonDataAnyOf2, _ := json.Marshal(dst.DataAnyOf2)
		if string(jsonDataAnyOf2) == "{}" { // empty struct
			dst.DataAnyOf2 = nil
		} else {
			return nil // data stored in dst.DataAnyOf2, return on the first match
		}
	} else {
		dst.DataAnyOf2 = nil
	}

	// try to unmarshal JSON data into DataAnyOf3
	err = json.Unmarshal(data, &dst.DataAnyOf3)
	if err == nil {
		jsonDataAnyOf3, _ := json.Marshal(dst.DataAnyOf3)
		if string(jsonDataAnyOf3) == "{}" { // empty struct
			dst.DataAnyOf3 = nil
		} else {
			return nil // data stored in dst.DataAnyOf3, return on the first match
		}
	} else {
		dst.DataAnyOf3 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Data)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *Data) MarshalJSON() ([]byte, error) {
	if src.DataAnyOf != nil {
		return json.Marshal(&src.DataAnyOf)
	}

	if src.DataAnyOf1 != nil {
		return json.Marshal(&src.DataAnyOf1)
	}

	if src.DataAnyOf2 != nil {
		return json.Marshal(&src.DataAnyOf2)
	}

	if src.DataAnyOf3 != nil {
		return json.Marshal(&src.DataAnyOf3)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableData struct {
	value *Data
	isSet bool
}

func (v NullableData) Get() *Data {
	return v.value
}

func (v *NullableData) Set(val *Data) {
	v.value = val
	v.isSet = true
}

func (v NullableData) IsSet() bool {
	return v.isSet
}

func (v *NullableData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableData(val *Data) *NullableData {
	return &NullableData{value: val, isSet: true}
}

func (v NullableData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
