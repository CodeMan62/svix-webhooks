/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ConnectorIn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorIn{}

// ConnectorIn struct for ConnectorIn
type ConnectorIn struct {
	Description      *string        `json:"description,omitempty"`
	FeatureFlag      *string        `json:"featureFlag,omitempty" validate:"regexp=^[a-zA-Z0-9\\\\-_.]+$"`
	FilterTypes      []string       `json:"filterTypes,omitempty"`
	Instructions     *string        `json:"instructions,omitempty"`
	InstructionsLink *string        `json:"instructionsLink,omitempty"`
	Kind             *ConnectorKind `json:"kind,omitempty"`
	Logo             string         `json:"logo"`
	Name             string         `json:"name"`
	Transformation   string         `json:"transformation"`
}

type _ConnectorIn ConnectorIn

// NewConnectorIn instantiates a new ConnectorIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorIn(logo string, name string, transformation string) *ConnectorIn {
	this := ConnectorIn{}
	var description string = ""
	this.Description = &description
	var instructions string = ""
	this.Instructions = &instructions
	this.Logo = logo
	this.Name = name
	this.Transformation = transformation
	return &this
}

// NewConnectorInWithDefaults instantiates a new ConnectorIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorInWithDefaults() *ConnectorIn {
	this := ConnectorIn{}
	var description string = ""
	this.Description = &description
	var instructions string = ""
	this.Instructions = &instructions
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConnectorIn) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorIn) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConnectorIn) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConnectorIn) SetDescription(v string) {
	o.Description = &v
}

// GetFeatureFlag returns the FeatureFlag field value if set, zero value otherwise.
func (o *ConnectorIn) GetFeatureFlag() string {
	if o == nil || IsNil(o.FeatureFlag) {
		var ret string
		return ret
	}
	return *o.FeatureFlag
}

// GetFeatureFlagOk returns a tuple with the FeatureFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorIn) GetFeatureFlagOk() (*string, bool) {
	if o == nil || IsNil(o.FeatureFlag) {
		return nil, false
	}
	return o.FeatureFlag, true
}

// HasFeatureFlag returns a boolean if a field has been set.
func (o *ConnectorIn) HasFeatureFlag() bool {
	if o != nil && !IsNil(o.FeatureFlag) {
		return true
	}

	return false
}

// SetFeatureFlag gets a reference to the given string and assigns it to the FeatureFlag field.
func (o *ConnectorIn) SetFeatureFlag(v string) {
	o.FeatureFlag = &v
}

// GetFilterTypes returns the FilterTypes field value if set, zero value otherwise.
func (o *ConnectorIn) GetFilterTypes() []string {
	if o == nil || IsNil(o.FilterTypes) {
		var ret []string
		return ret
	}
	return o.FilterTypes
}

// GetFilterTypesOk returns a tuple with the FilterTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorIn) GetFilterTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.FilterTypes) {
		return nil, false
	}
	return o.FilterTypes, true
}

// HasFilterTypes returns a boolean if a field has been set.
func (o *ConnectorIn) HasFilterTypes() bool {
	if o != nil && !IsNil(o.FilterTypes) {
		return true
	}

	return false
}

// SetFilterTypes gets a reference to the given []string and assigns it to the FilterTypes field.
func (o *ConnectorIn) SetFilterTypes(v []string) {
	o.FilterTypes = v
}

// GetInstructions returns the Instructions field value if set, zero value otherwise.
func (o *ConnectorIn) GetInstructions() string {
	if o == nil || IsNil(o.Instructions) {
		var ret string
		return ret
	}
	return *o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorIn) GetInstructionsOk() (*string, bool) {
	if o == nil || IsNil(o.Instructions) {
		return nil, false
	}
	return o.Instructions, true
}

// HasInstructions returns a boolean if a field has been set.
func (o *ConnectorIn) HasInstructions() bool {
	if o != nil && !IsNil(o.Instructions) {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given string and assigns it to the Instructions field.
func (o *ConnectorIn) SetInstructions(v string) {
	o.Instructions = &v
}

// GetInstructionsLink returns the InstructionsLink field value if set, zero value otherwise.
func (o *ConnectorIn) GetInstructionsLink() string {
	if o == nil || IsNil(o.InstructionsLink) {
		var ret string
		return ret
	}
	return *o.InstructionsLink
}

// GetInstructionsLinkOk returns a tuple with the InstructionsLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorIn) GetInstructionsLinkOk() (*string, bool) {
	if o == nil || IsNil(o.InstructionsLink) {
		return nil, false
	}
	return o.InstructionsLink, true
}

// HasInstructionsLink returns a boolean if a field has been set.
func (o *ConnectorIn) HasInstructionsLink() bool {
	if o != nil && !IsNil(o.InstructionsLink) {
		return true
	}

	return false
}

// SetInstructionsLink gets a reference to the given string and assigns it to the InstructionsLink field.
func (o *ConnectorIn) SetInstructionsLink(v string) {
	o.InstructionsLink = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *ConnectorIn) GetKind() ConnectorKind {
	if o == nil || IsNil(o.Kind) {
		var ret ConnectorKind
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorIn) GetKindOk() (*ConnectorKind, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *ConnectorIn) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given ConnectorKind and assigns it to the Kind field.
func (o *ConnectorIn) SetKind(v ConnectorKind) {
	o.Kind = &v
}

// GetLogo returns the Logo field value
func (o *ConnectorIn) GetLogo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Logo
}

// GetLogoOk returns a tuple with the Logo field value
// and a boolean to check if the value has been set.
func (o *ConnectorIn) GetLogoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Logo, true
}

// SetLogo sets field value
func (o *ConnectorIn) SetLogo(v string) {
	o.Logo = v
}

// GetName returns the Name field value
func (o *ConnectorIn) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConnectorIn) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConnectorIn) SetName(v string) {
	o.Name = v
}

// GetTransformation returns the Transformation field value
func (o *ConnectorIn) GetTransformation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Transformation
}

// GetTransformationOk returns a tuple with the Transformation field value
// and a boolean to check if the value has been set.
func (o *ConnectorIn) GetTransformationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transformation, true
}

// SetTransformation sets field value
func (o *ConnectorIn) SetTransformation(v string) {
	o.Transformation = v
}

func (o ConnectorIn) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorIn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.FeatureFlag) {
		toSerialize["featureFlag"] = o.FeatureFlag
	}
	if !IsNil(o.FilterTypes) {
		toSerialize["filterTypes"] = o.FilterTypes
	}
	if !IsNil(o.Instructions) {
		toSerialize["instructions"] = o.Instructions
	}
	if !IsNil(o.InstructionsLink) {
		toSerialize["instructionsLink"] = o.InstructionsLink
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	toSerialize["logo"] = o.Logo
	toSerialize["name"] = o.Name
	toSerialize["transformation"] = o.Transformation
	return toSerialize, nil
}

func (o *ConnectorIn) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"logo",
		"name",
		"transformation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectorIn := _ConnectorIn{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectorIn)

	if err != nil {
		return err
	}

	*o = ConnectorIn(varConnectorIn)

	return err
}

type NullableConnectorIn struct {
	value *ConnectorIn
	isSet bool
}

func (v NullableConnectorIn) Get() *ConnectorIn {
	return v.value
}

func (v *NullableConnectorIn) Set(val *ConnectorIn) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorIn) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorIn(val *ConnectorIn) *NullableConnectorIn {
	return &NullableConnectorIn{value: val, isSet: true}
}

func (v NullableConnectorIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
