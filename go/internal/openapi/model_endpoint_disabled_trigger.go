/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EndpointDisabledTrigger the model 'EndpointDisabledTrigger'
type EndpointDisabledTrigger string

// List of EndpointDisabledTrigger
const (
	ENDPOINTDISABLEDTRIGGER_MANUAL EndpointDisabledTrigger = "manual"
	ENDPOINTDISABLEDTRIGGER_AUTOMATIC EndpointDisabledTrigger = "automatic"
)

// All allowed values of EndpointDisabledTrigger enum
var AllowedEndpointDisabledTriggerEnumValues = []EndpointDisabledTrigger{
	"manual",
	"automatic",
}

func (v *EndpointDisabledTrigger) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EndpointDisabledTrigger(value)
	for _, existing := range AllowedEndpointDisabledTriggerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EndpointDisabledTrigger", value)
}

// NewEndpointDisabledTriggerFromValue returns a pointer to a valid EndpointDisabledTrigger
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEndpointDisabledTriggerFromValue(v string) (*EndpointDisabledTrigger, error) {
	ev := EndpointDisabledTrigger(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EndpointDisabledTrigger: valid values are %v", v, AllowedEndpointDisabledTriggerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EndpointDisabledTrigger) IsValid() bool {
	for _, existing := range AllowedEndpointDisabledTriggerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EndpointDisabledTrigger value
func (v EndpointDisabledTrigger) Ptr() *EndpointDisabledTrigger {
	return &v
}

type NullableEndpointDisabledTrigger struct {
	value *EndpointDisabledTrigger
	isSet bool
}

func (v NullableEndpointDisabledTrigger) Get() *EndpointDisabledTrigger {
	return v.value
}

func (v *NullableEndpointDisabledTrigger) Set(val *EndpointDisabledTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointDisabledTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointDisabledTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointDisabledTrigger(val *EndpointDisabledTrigger) *NullableEndpointDisabledTrigger {
	return &NullableEndpointDisabledTrigger{value: val, isSet: true}
}

func (v NullableEndpointDisabledTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointDisabledTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

